#version 330 core

precision highp float;

const float fogdensity = .0002;

const float lightPower = 1000000000.;
const vec3 lightPosition_worldspace = vec3(100500, 100500, 0);

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDir_cameraspace;
in vec3 LightDir_cameraspace;

in vec3 LightDir_tangentspace;
in vec3 EyeDir_tangentspace;

in vec3 fragmentLight;

// Ouput data
out vec3 color;

uniform sampler2D textureSampler;
uniform sampler2D normalTextureSampler;
uniform vec3 skyColor;
uniform vec3 lightDirection;

vec4 gamma(vec4 color){
    return vec4(pow(color.rgb, vec3(1.0/2.0)), 1);
}

vec3 fog(vec3 color){
	float z = gl_FragCoord.z / gl_FragCoord.w;
    float fog = clamp(exp(-fogdensity * z * z), 0.2, 1);
 
    return mix(skyColor, color, fog); 
}

mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( p );
    vec3 dp2 = dFdy( p );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );
 
    // solve the linear system
    vec3 dp2perp = cross( dp2, N );
    vec3 dp1perp = cross( N, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
    // construct a scale-invariant frame 
    float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
    return mat3( T * invmax, B * invmax, N );
}
 
vec3 perturb_normal( vec3 N, vec3 V, vec2 texcoord, sampler2D tex1 )
{
    // assume N, the interpolated vertex normal and 
    // V, the view vector (vertex to eye)
   vec3 map = texture(tex1, texcoord ).xyz;
   map = map * 255./127. - 128./127.;
    mat3 TBN = cotangent_frame(N, -V, texcoord);
    return normalize(TBN * map);
}

void main(){
	//vec4 tempColor = gamma(texture(textureSampler, fragmentColor) * vec4(fragmentLight, 1.0)); 
	
	
	/*vec3 MaterialDiffuseColor = texture2D( textureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.2,0.2,0.2) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);
	
	float distance = length( lightPosition_worldspace - Position_worldspace );

	vec3 n = normalize( Normal_cameraspace );
	vec3 l = normalize( LightDir_cameraspace );
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	vec3 E = normalize(EyeDir_cameraspace);
	vec3 R = reflect(-l,n);
	float cosAlpha = clamp( dot( E,R ), 0,1 );*/
	
	/*vec3 tempcolor = 
		MaterialAmbientColor +
		MaterialDiffuseColor * skyColor * lightPower * cosTheta / (distance*distance) +
		MaterialSpecularColor * skyColor * lightPower * pow(cosAlpha,5) / (distance*distance); */
		
	vec3 tempcolor = texture(textureSampler, UV).rgb * fragmentLight;
		
	vec3 PN = perturb_normal(Normal_cameraspace, EyeDir_cameraspace, UV, normalTextureSampler);
	
	float lambdaTerm = dot(PN, normalize(LightDir_cameraspace));
	//if (lambdaTerm > 0.0) {
		tempcolor -= tempcolor * skyColor * lambdaTerm / 2;
		
		//tempcolor += MaterialSpecularColor * skyColor  * pow(cosAlpha,2) / (distance*distance); 
	//}
	
	
	color = fog(tempcolor);
}