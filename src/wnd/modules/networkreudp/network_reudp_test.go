package networkreudp

import (
	"wnd/modules"
	"wnd/utils/log"

	"bytes"
	"testing"
	"time"

	"github.com/kr/pretty"
)

var testDataSmall = []byte("Jackdaws loves my big sphinx of quartz")
var testDataBig = []byte("Lorem ipsum and all the other wise things that matter. Lorem ipsum and all the other wise things that matter. Lorem ipsum and all the other wise things that matter. Lorem ipsum and all the other wise things that matter. Lorem ipsum and all the other wise things that matter. Lorem ipsum and all the other wise things that matter.")
var testDataHuge = []byte
var carrierOut, carrierIn modules.Network = NewClient("localhost"), NewServer()

func TestUdpCarrier(t *testing.T) {
	log.NewTestLogger(t)

	if e := carrierIn.Start(); e != nil {
		t.Fatal(e)
	}

	if e := carrierOut.Start(); e != nil {
		t.Fatal(e)
	}

	if e := carrierOut.Send(carrierIn.Where(), testDataSmall, true); e != nil {
		t.Fatal(e)
	}
	if e := carrierIn.Send(carrierOut.Where(), testDataBig, true); e != nil {
		t.Fatal(e)
	}
	if e := carrierIn.Send(carrierOut.Where(), testDataHuge, true); e != nil {
		t.Fatal(e)
	}

	/*var wg sync.WaitGroup
	wg.Add(3)

	go func(carrierIn modules.Network) {
		var froms []interface{}
		var whats [][]byte
		var e error
		for {
			if froms, whats, e = carrierIn.Poll(); e == nil {
				if len(froms) == len(whats) {
					for i := 0; i < len(froms); i++ {
						t.Logf("%v - %v = %v", froms[i], pretty.Formatter(whats[i]), bytes.Equal(whats[i], testDataSmall) || bytes.Equal(whats[i], testDataBig))
						wg.Done()
					}
				} else {
					t.Fatalf("Different results: %d/%d", len(froms), len(whats))
				}
			} else {
				t.Fatal(e)
			}
		}
	}(carrierIn)

	go func(carrierOut modules.Network) {
		var froms []interface{}
		var whats [][]byte
		var e error
		for {
			if froms, whats, e = carrierOut.Poll(); e == nil {
				if len(froms) == len(whats) {
					for i := 0; i < len(froms); i++ {
						t.Logf("%v - %v = %v", froms[i], pretty.Formatter(whats[i]), bytes.Equal(whats[i], testDataSmall) || bytes.Equal(whats[i], testDataBig))
						wg.Done()
					}
				} else {
					t.Fatalf("Different results: %d/%d", len(froms), len(whats))
				}
			} else {
				t.Fatal(e)
			}
		}
	}(carrierOut)

	wg.Wait()*/

	<-time.NewTimer(5 * time.Second).C

	if froms, whats, e := carrierIn.Poll(); e == nil {
		if len(froms) == len(whats) {
			for i := 0; i < len(froms); i++ {
				t.Logf("%v - %v = %v", froms[i], pretty.Formatter(whats[i]), bytes.Equal(whats[i], testDataSmall) || bytes.Equal(whats[i], testDataBig) || bytes.Equal(whats[i], testDataHuge))
			}
		} else {
			t.Fatalf("Different results: %d/%d", len(froms), len(whats))
		}
	} else {
		t.Fatal(e)
	}

	if froms, whats, e := carrierOut.Poll(); e == nil {
		if len(froms) == len(whats) {
			for i := 0; i < len(froms); i++ {
				t.Logf("%v - %v = %v", froms[i], pretty.Formatter(whats[i]), bytes.Equal(whats[i], testDataSmall) || bytes.Equal(whats[i], testDataBig) || bytes.Equal(whats[i], testDataHuge))
			}
		} else {
			t.Fatalf("Different results: %d/%d", len(froms), len(whats))
		}
	} else {
		t.Fatal(e)
	}

	<-time.NewTimer(5 * time.Second).C

	//carrierOut.Stop()
	//carrierIn.Stop()
}
